{"version":3,"sources":["MainScreen.js","serviceWorker.js","index.js"],"names":["AlignedText","styled","div","MainScreen","props","state","heroes","draft","fetch","then","res","json","result","setState","performDraft","mappedHeroes","int","str","agi","this","forEach","hero","heroAttribute","push","Object","values","map","randomSample","path","items","Math","floor","random","length","Spinner","style","width","height","renderedHeroes","Col","md","xs","key","Card","CardImg","top","src","convertToApiPath","alt","CardBody","CardTitle","CardSubtitle","className","CardText","join","Container","marginTop","marginBottom","Row","Button","color","onClick","e","preventDefault","React","Component","Boolean","window","location","hostname","match","Main","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"meAKA,IAAMA,EAAcC,IAAOC,IAAV,KA6FFC,E,kDAtFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,GACRC,MAAO,IAIXC,MAAM,0CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,EAAKC,SAAS,CACNP,OAAQM,IAEhB,EAAKE,kBAdE,E,2DAkBH,IAAD,OAEPC,EAAe,CAACC,IAAK,GAAIC,IAAK,GAAIC,IAAK,IAC3CC,KAAKd,MAAMC,OAAOc,SAAQ,SAAAC,GACtB,IAAMC,EAAgBD,EAAI,aAC1BN,EAAaO,GAAeC,KAAKF,MAGrCF,KAAKN,SAAS,CAEVN,MAAOiB,OAAOC,OAAOV,GAAcW,KAAI,SAAApB,GAAM,OAAI,EAAKqB,aAAarB,U,uCAI1DsB,GACb,MAAO,2BAA6BA,I,mCAG3BC,GACT,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,W,+BAGxC,IAAD,OAGL,KADkBd,KAAKd,MAAMC,OAAO2B,OAAS,GAEzC,OACI,kBAACjC,EAAD,KACI,iDACA,kBAACkC,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WAMrD,IAAMC,EAAiBnB,KAAKd,MAAME,MAC7BmB,KAAI,SAAAL,GAAI,OACL,kBAACkB,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAKC,IAAKrB,EAAI,IACzB,kBAACsB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAG,EAACT,MAAM,OAAOU,IAAK,EAAKC,iBAAiB1B,EAAI,KAAU2B,IAAI,eACvE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAW,4BAAK7B,EAAI,iBACpB,kBAAC8B,EAAA,EAAD,CAAcC,UAAU,gBACnB/B,EAAI,YAAkB,IAAMA,EAAI,cAErC,kBAACgC,EAAA,EAAD,CAAUD,UAAU,aAAa/B,EAAI,MAAUiC,KAAK,aAMxE,OACI,kBAACtD,EAAD,KACI,oDACA,kBAACuD,EAAA,EAAD,CAAWpB,MAAO,CAACqB,UAAW,OAAQC,aAAc,SAChD,kBAACC,EAAA,EAAD,KACKpB,IAGT,kBAACqB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,SAACC,GAC9BA,EAAEC,iBACF,EAAKjD,iBAFT,+B,GA9ESkD,IAAMC,W,YCCXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qICVN,IAAMC,EAAOtE,IAAOC,IAAV,KAKVsE,IAASC,OACD,kBAACF,EAAD,KACI,kBAAC,EAAD,OAGRG,SAASC,eAAe,SD+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrE,MAAK,SAAAsE,GACjCA,EAAaC,kB","file":"static/js/main.936804f1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Spinner, Button, Container, Row, Col, Card, CardImg, CardText, CardBody, CardTitle,\r\n    CardSubtitle } from 'reactstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst AlignedText = styled.div`\r\n  text-align: center;\r\n  vertical-align: middle;\r\n`;\r\n\r\n\r\nclass MainScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            heroes: [],\r\n            draft: []\r\n        };\r\n\r\n        // Fetch heroes from API, then perform first draft\r\n        fetch(\"https://api.opendota.com/api/heroStats\")\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                this.setState({\r\n                        heroes: result\r\n                });\r\n                this.performDraft();\r\n            });\r\n    }\r\n\r\n    performDraft() {\r\n        // Split heroes based on main attribute\r\n        let mappedHeroes = {int: [], str: [], agi: []};\r\n        this.state.heroes.forEach(hero => {\r\n            const heroAttribute = hero['primary_attr'];\r\n            mappedHeroes[heroAttribute].push(hero)\r\n        });\r\n\r\n        this.setState({\r\n            // Sample one hero from each attribute type\r\n            draft: Object.values(mappedHeroes).map(heroes => this.randomSample(heroes))\r\n        });\r\n    }\r\n\r\n    convertToApiPath(path) {\r\n        return \"https://api.opendota.com\" + path\r\n    }\r\n\r\n    randomSample(items){\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    }\r\n\r\n    render() {\r\n        // Show loading screen\r\n        const hasLoaded = this.state.heroes.length > 0;\r\n        if (!hasLoaded) {\r\n            return (\r\n                <AlignedText>\r\n                    <h1>Loading heroes...</h1>\r\n                    <Spinner style={{ width: '2rem', height: '2rem' }} />\r\n                </AlignedText>\r\n            )\r\n        }\r\n\r\n        // Heroes have been loaded - render\r\n        const renderedHeroes = this.state.draft\r\n            .map(hero =>\r\n                <Col md=\"4\" xs=\"12\" key={hero['id']}>\r\n                    <Card>\r\n                        <CardImg top width=\"100%\" src={this.convertToApiPath(hero['img'])} alt=\"hero image\" />\r\n                        <CardBody>\r\n                            <CardTitle><h3>{hero['localized_name']}</h3></CardTitle>\r\n                            <CardSubtitle className=\"text-primary\">\r\n                                {hero['attack_type'] + \" \" + hero['primary_attr']}\r\n                            </CardSubtitle>\r\n                            <CardText className=\"text-info\">{hero['roles'].join(\", \")}</CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            );\r\n\r\n        return (\r\n            <AlignedText>\r\n                <h1>You have been given:</h1>\r\n                <Container style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\r\n                    <Row>\r\n                        {renderedHeroes}\r\n                    </Row>\r\n                </Container>\r\n                <Button color=\"primary\" onClick={(e) => {\r\n                    e.preventDefault();\r\n                    this.performDraft();\r\n                }}>Roll the dice again...</Button>\r\n            </AlignedText>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainScreen\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MainScreen from './MainScreen';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport styled from 'styled-components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst Main = styled.div`\r\n  max-width: 1024px;\r\n  margin: 0 auto; // Center in website\r\n`;\r\n\r\nReactDOM.render((\r\n        <Main>\r\n            <MainScreen/>\r\n        </Main>\r\n    ),\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}