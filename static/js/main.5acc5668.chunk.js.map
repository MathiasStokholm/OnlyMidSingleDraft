{"version":3,"sources":["firebase.js","serviceWorker.js","components/header.js","components/welcome.js","components/chat.js","components/team.js","MainScreen.js","index.js"],"names":["Backend","onHeroStatsAvailable","onGameChanged","onNewGame","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","this","db","firestore","console","log","gameCollectionName","gameCollection","collection","gameDoc","orderBy","limitToLast","onSnapshot","games","docs","forEach","doc","newGame","id","ref","data","error","heroStats","fetch","then","res","json","result","catch","reason","path","team","player","message","update","FieldValue","arrayUnion","Timestamp","fromDate","Date","teamName","playerName","playerIndex","heroId","mappedHeroes","int","str","agi","hero","heroAttribute","push","draft","randomSamplePop","createTeam","players","chat","0","1","2","3","4","selectedHeroes","add","timestamp","teams","radiant","dire","items","idx","Math","floor","random","length","sample","splice","Boolean","window","location","hostname","match","Header","props","state","newGameDialogShowing","setState","heroStatsReady","Modal","isOpen","className","toggle","toggleNewGameDialog","ModalHeader","ModalFooter","Button","color","onClick","backend","startNewGame","Navbar","expand","style","marginBottom","NavbarBrand","tag","Link","to","Nav","navbar","NavItem","NavLink","disabled","event","preventDefault","startNewGameClicked","React","Component","Welcome","Spinner","radiantPlayers","map","ListGroupItem","key","direPlayers","Container","Row","Col","Card","CardImg","src","alt","CardBody","CardTitle","CardSubtitle","ListGroup","flush","Chat","scrollToBottom","messagesEnd","scrollIntoView","behavior","inputValue","submitMessage","target","value","sendChatMessage","prevProps","messages","messageList","dummyForScroll","float","clear","el","InputGroup","Input","onChange","updateInputValue","onKeyPress","handleKeyPress","InputGroupAddon","addonType","Team","playerNameInput","newValue","chosenPlayerName","setPlayerName","setSelectedHero","history","autoFocus","ModalBody","type","onPlayerNameInput","placeholder","playerNameChosen","createPlayerRow","hero_ids","selected_id","hero_id","filter","selected","tooltipId","xs","href","cursor","onHeroClicked","inverse","top","convertToApiPath","CardHeader","drafts","index","toString","sm","md","AlignedText","styled","div","MainScreen","heroes","performDraft","Object","values","randomSample","width","height","renderedHeroes","CardText","join","marginTop","e","Main","App","radiantMessages","direMessages","game","radiantTeam","direTeam","router","basename","exact","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5acc5668.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore'\r\n\r\n// The current game we reuse\r\n\r\nclass Backend {\r\n    config = {\r\n        apiKey: \"AIzaSyCVXi7MSmaFcSDtvK2eYdpggzQgbHOf_dk\",\r\n        authDomain: \"onlymid-6adbf.firebaseapp.com\",\r\n        databaseURL: \"https://onlymid-6adbf.firebaseio.com\",\r\n        projectId: \"onlymid-6adbf\",\r\n        storageBucket: \"onlymid-6adbf.appspot.com\",\r\n        messagingSenderId: \"464340805319\",\r\n        appId: \"1:464340805319:web:65283996aefc809d2800e2\"\r\n    };\r\n\r\n    constructor(onHeroStatsAvailable, onGameChanged, onNewGame) {\r\n        firebase.initializeApp(this.config);\r\n        this.db = firebase.firestore();\r\n\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n            // Access testing game collection\r\n            console.log(\"Using test game collection\");\r\n            this.gameCollectionName = \"game_test\";\r\n        } else {\r\n            // Access production game collection\r\n            console.log(\"Using production game collection\");\r\n            this.gameCollectionName = \"game\";\r\n        }\r\n\r\n        this.gameCollection = this.db.collection(this.gameCollectionName);\r\n        this.gameDoc = null;\r\n        this.gameCollection\r\n            .orderBy(\"timestamp\")\r\n            .limitToLast(1)\r\n            .onSnapshot(games => {\r\n                games.docs.forEach(doc => {\r\n                    const newGame = this.gameDoc == null? false: this.gameDoc.id !== doc.id;\r\n                    this.gameDoc = doc.ref;\r\n                    if (newGame) {\r\n                        onNewGame();\r\n                    }\r\n                    onGameChanged(doc.data());\r\n                });\r\n            }, error => console.log(error));\r\n\r\n        // Fetch the actual dota 2 data\r\n        this.heroStats = null;\r\n        fetch(\"https://api.opendota.com/api/heroStats\")\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                this.heroStats = result;\r\n                onHeroStatsAvailable(result);\r\n            })\r\n            .catch(reason => console.log(reason));\r\n    }\r\n\r\n    convertToApiPath(path) {\r\n        return \"https://api.opendota.com\" + path\r\n    }\r\n\r\n    sendChatMessage(team, player, message) {\r\n        const path = \"teams.\" + team + \".chat\";\r\n        this.gameDoc.update(path, firebase.firestore.FieldValue.arrayUnion({\r\n            \"timestamp\": firebase.firestore.Timestamp.fromDate(new Date()),\r\n            \"player\": player,\r\n            \"message\": message,\r\n        }))\r\n            .catch(reason => console.log(reason));\r\n    }\r\n\r\n    setPlayerName(teamName, playerName) {\r\n        const path = \"teams.\" + teamName + \".players\";\r\n        this.gameDoc.update(path, firebase.firestore.FieldValue.arrayUnion(playerName))\r\n            .catch(reason => console.log(reason));\r\n    }\r\n\r\n    setSelectedHero(teamName, playerIndex, heroId) {\r\n        const path = `teams.${teamName}.selectedHeroes.${playerIndex}`;\r\n        this.gameDoc.update(path, heroId)\r\n            .catch(reason => console.log(reason));\r\n    }\r\n\r\n    startNewGame() {\r\n        if (this.heroStats === null) {\r\n            console.log(\"Cannot create new game - hero stats not loaded yet\");\r\n            return;\r\n        }\r\n\r\n        // Sort into a lists of int, str and agi\r\n        let mappedHeroes = {int: [], str: [], agi: []};\r\n        this.heroStats.forEach(hero => {\r\n            const heroAttribute = hero['primary_attr'];\r\n            mappedHeroes[heroAttribute].push(hero)\r\n        });\r\n\r\n        const draft = () => {\r\n            return [\r\n                this.randomSamplePop(mappedHeroes[\"int\"])[\"id\"],\r\n                this.randomSamplePop(mappedHeroes[\"str\"])[\"id\"],\r\n                this.randomSamplePop(mappedHeroes[\"agi\"])[\"id\"]\r\n            ]\r\n        };\r\n\r\n        let createTeam = () => {\r\n            return {\r\n                players: [],\r\n                chat: [],\r\n                draft: {\r\n                    0: draft(),\r\n                    1: draft(),\r\n                    2: draft(),\r\n                    3: draft(),\r\n                    4: draft(),\r\n                },\r\n                selectedHeroes: {\r\n                    0: null,\r\n                    1: null,\r\n                    2: null,\r\n                    3: null,\r\n                    4: null,\r\n                }\r\n            }\r\n        };\r\n\r\n        // Create a new game!\r\n        this.gameCollection.add({\r\n            timestamp: firebase.firestore.Timestamp.fromDate(new Date()),\r\n            teams: {\r\n                radiant: createTeam(),\r\n                dire: createTeam(),\r\n            }\r\n        })\r\n            .then(() => console.log(\"Created new game!\"))\r\n            .catch(reason => console.log(reason));\r\n\r\n    }\r\n\r\n    randomSamplePop(items) {\r\n        const idx = Math.floor(Math.random() * items.length);\r\n        const sample = items[idx];\r\n        items.splice(idx, 1);\r\n        return sample;\r\n    }\r\n}\r\n\r\nexport default Backend;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {\r\n    Navbar,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink, Modal, ModalHeader, ModalFooter, Button\r\n} from 'reactstrap';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newGameDialogShowing: false\r\n        };\r\n    }\r\n\r\n    toggleNewGameDialog() {\r\n        this.setState({\r\n            newGameDialogShowing: !this.state.newGameDialogShowing\r\n        })\r\n    }\r\n\r\n    startNewGameClicked() {\r\n        this.setState({\r\n            newGameDialogShowing: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const heroStatsReady = this.props.heroStats != null;\r\n\r\n        return (\r\n            <div>\r\n                <Modal isOpen={this.state.newGameDialogShowing} className={this.props.className}\r\n                       toggle={() => this.toggleNewGameDialog()}>\r\n                    <ModalHeader>Really start new game?</ModalHeader>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={() => {\r\n                            this.props.backend.startNewGame();\r\n                            this.toggleNewGameDialog();\r\n                        }}>Yes!</Button>\r\n                        <Button color=\"muted\" onClick={() => this.toggleNewGameDialog()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Navbar color=\"dark\" className=\"navbar-dark\" expand=\"md\" style={{marginBottom: '5px'}}>\r\n                    <NavbarBrand tag={Link} to=\"/\">Only Mid Single Draft</NavbarBrand>\r\n                    <Nav className=\"ml-auto\" navbar>\r\n                        <NavItem>\r\n                            <NavLink tag={Link} to=\"/old\">Old App</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink tag={Link} to=\"/\" disabled={!heroStatsReady} onClick={(event) => {\r\n                                event.preventDefault();\r\n                                this.startNewGameClicked();\r\n                            }}>Start New Game</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardImg,\r\n    CardSubtitle,\r\n    CardTitle,\r\n    Col,\r\n    Container,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Row,\r\n    Spinner\r\n} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nclass Welcome extends React.Component {\r\n    render() {\r\n        const teams = this.props.teams;\r\n        if (teams == null) {\r\n            return (\r\n                <div>\r\n                    <h1>Loading teams...</h1>\r\n                    <Spinner color=\"primary\"/>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const radiantPlayers = teams[\"radiant\"][\"players\"].map(player => {\r\n            return <ListGroupItem key={player}>{player}</ListGroupItem>\r\n        });\r\n\r\n        const direPlayers = teams[\"dire\"][\"players\"].map(player => {\r\n            return <ListGroupItem key={player}>{player}</ListGroupItem>\r\n        });\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <CardImg\r\n                                src=\"https://gamepedia.cursecdn.com/dota2_gamepedia/9/9b/Radiant_logo.png?version=32e00d1012d73614f60704d6a77207cb\"\r\n                                alt=\"Radiant logo\"/>\r\n                            <CardBody>\r\n                                <CardTitle><h2>Radiant</h2></CardTitle>\r\n                                <CardSubtitle>Players:</CardSubtitle>\r\n                                <ListGroup flush>\r\n                                    {radiantPlayers}\r\n                                </ListGroup>\r\n                                <Button color=\"primary\" tag={Link} to=\"/radiant\"\r\n                                        disabled={teams[\"radiant\"][\"players\"].length >= 5}>Join</Button>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col>\r\n                        <Card>\r\n                            <CardImg\r\n                                src=\"https://gamepedia.cursecdn.com/dota2_gamepedia/4/46/Dire_logo.png?version=26566f7414e47fa1203d2f0a0ae3d64b\"\r\n                                alt=\"Dire logo\"/>\r\n                            <CardBody>\r\n                                <CardTitle><h2>Dire</h2></CardTitle>\r\n                                <CardSubtitle>Players:</CardSubtitle>\r\n                                <ListGroup flush>\r\n                                    {direPlayers}\r\n                                </ListGroup>\r\n                                <Button color=\"primary\" tag={Link} to=\"/dire\"\r\n                                        disabled={teams[\"dire\"][\"players\"].length >= 5}>Join</Button>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Welcome\r\n","import React from 'react'\r\nimport {\r\n    Button, InputGroupAddon, InputGroup, Input, ListGroup, ListGroupItem\r\n} from 'reactstrap';\r\n\r\n\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputValue: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Send initial message on joining\r\n        this.submitMessage(\"Has joined the team!\");\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    updateInputValue(event) {\r\n        this.setState({\r\n            inputValue: event.target.value\r\n        });\r\n    }\r\n\r\n    handleKeyPress(event) {\r\n        if (event.key === 'Enter') {\r\n            this.submitMessage(this.state.inputValue);\r\n        }\r\n    }\r\n\r\n    submitMessage(message) {\r\n        this.props.backend.sendChatMessage(this.props.team, this.props.player, message);\r\n        this.setState({\r\n            inputValue: \"\"\r\n        });\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.messagesEnd.scrollIntoView({behavior: \"smooth\"});\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // Scroll to bottom if update has changed the number of messages\r\n        if (prevProps.messages.length !== this.props.messages.length) {\r\n            this.scrollToBottom();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const messageList = this.props.messages.map(message => {\r\n            return <ListGroupItem key={message[\"timestamp\"]}>\r\n                {message[\"player\"] + \": \" + message[\"message\"]}\r\n            </ListGroupItem>;\r\n        });\r\n\r\n        // Dummy div used to scroll easily to bottom of messages listasd\r\n        const dummyForScroll = (\r\n            <div style={{float: \"left\", clear: \"both\"}}\r\n                 ref={(el) => {\r\n                     this.messagesEnd = el;\r\n                 }}>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <ListGroup flush style={{\"overflowY\": \"auto\", \"maxHeight\": \"700px\"}}>\r\n                    {messageList}\r\n                    {dummyForScroll}\r\n                </ListGroup>\r\n                <InputGroup>\r\n                    <Input value={this.state.inputValue}\r\n                           onChange={(event) => this.updateInputValue(event)}\r\n                           onKeyPress={(event) => this.handleKeyPress(event)}/>\r\n                    <InputGroupAddon addonType=\"append\">\r\n                        <Button color=\"info\"\r\n                                disabled={this.state.inputValue.length <= 0}\r\n                                onClick={() => this.submitMessage(this.state.inputValue)}>Send</Button>\r\n                    </InputGroupAddon>\r\n                </InputGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport {\r\n    Button, Card, CardImg, Col, Container,\r\n    Input,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader, Row, Spinner, CardHeader,\r\n} from \"reactstrap\";\r\nimport Chat from \"./chat\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nclass Team extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playerNameInput: \"\",\r\n            playerName: null,\r\n        }\r\n    }\r\n\r\n    onPlayerNameInput(newValue) {\r\n        this.setState({\r\n            playerNameInput: newValue\r\n        })\r\n    }\r\n\r\n    playerNameChosen() {\r\n        const chosenPlayerName = this.state.playerNameInput;\r\n        this.setState({\r\n            playerName: chosenPlayerName,\r\n            playerNameInput: \"\",\r\n        });\r\n\r\n        this.props.backend.setPlayerName(this.props.teamName, chosenPlayerName);\r\n    }\r\n\r\n    onHeroClicked(playerIndex, heroId) {\r\n        this.props.backend.setSelectedHero(this.props.teamName, playerIndex, heroId)\r\n    }\r\n\r\n    render() {\r\n        // If team is undefined, just show a loading screen\r\n        const team = this.props.team;\r\n        const heroStats = this.props.heroStats;\r\n        if (team == null || heroStats == null) {\r\n            return (\r\n                <div>\r\n                    <h1>Loading teams...</h1>\r\n                    <Spinner color=\"primary\"/>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        // Show modal to allow picking player name if needed\r\n        const playerName = this.state.playerName;\r\n        const players = team[\"players\"];\r\n        if (playerName == null) {\r\n            // Navigate back to index if team is full\r\n            if (players.length >= 5) {\r\n                this.props.history.push(\"/\")\r\n            }\r\n\r\n            return (\r\n                <Modal isOpen autoFocus={false} className={this.props.className}>\r\n                    <ModalHeader>Specify name</ModalHeader>\r\n                    <ModalBody>\r\n                        <Input type=\"text\"\r\n                               autoFocus\r\n                               onChange={(event) => this.onPlayerNameInput(event.target.value)}\r\n                               placeholder=\"Please input your desired player name\"/>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\"\r\n                                disabled={this.state.playerNameInput.length <= 0}\r\n                                onClick={() => {\r\n                                    this.playerNameChosen();\r\n                                }}>Join</Button>\r\n                        <Button color=\"muted\" tag={Link} to=\"/\">Go back</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            );\r\n        }\r\n\r\n        const teamName = this.props.teamName;\r\n\r\n        // Look up a hero based on its ID in the dataset (rather than the index in the JSON array)\r\n        const findHero = (idx) => {\r\n            return heroStats.filter(hero => hero[\"id\"] === idx)[0];\r\n        };\r\n\r\n        const createPlayerRow = (playerIndex, player, hero_ids, selected_id) => {\r\n            return (\r\n                <Row style={{\"marginBottom\": \"10px\"}} key={player}>\r\n                    <div style={{\"width\": \"100%\", \"textAlign\": \"center\"}}>\r\n                        <Col>\r\n                            <h5 style={{\"marginBottom\": \"2px\"}}>{player}</h5>\r\n                        </Col>\r\n                    </div>\r\n                    <Row style={{\"marginLeft\": \"0px\", \"marginRight\": \"0px\"}}>\r\n                        {hero_ids.map(hero_id => {\r\n                            const hero = findHero(hero_id);\r\n                            const selected = hero_id === selected_id;\r\n                            const tooltipId = \"Card_\" + player + hero_id;\r\n                            return (\r\n                                <Col xs=\"4\" style={{\"padding\": \"2px\"}} key={tooltipId}>\r\n                                    <Card href=\"#\" id={tooltipId}\r\n                                          style={{cursor: \"pointer\"}}\r\n                                          onClick={() => this.onHeroClicked(playerIndex, hero_id)}\r\n                                          {...(selected ? {color: \"info\", inverse: true} : {})}>\r\n                                        <CardImg top src={this.props.backend.convertToApiPath(hero['img'])}\r\n                                                 alt=\"hero image\"/>\r\n                                        <CardHeader style={{\r\n                                            \"fontSize\": \"1.0rem\",\r\n                                            \"textAlign\": \"center\",\r\n                                            \"padding\": \"0.75rem 0.25rem\"\r\n                                        }}>\r\n                                            {hero['localized_name']}\r\n                                        </CardHeader>\r\n                                    </Card>\r\n                                </Col>\r\n                            )\r\n                        })}\r\n                    </Row>\r\n                </Row>\r\n            );\r\n        };\r\n\r\n        // Look up drafts for players on team\r\n        let drafts = [];\r\n        for (let index = 0; index < players.length; index++) {\r\n            const player = players[index];\r\n            const hero_ids = team[\"draft\"][index.toString()];\r\n            const selected_id = team[\"selectedHeroes\"][index.toString()];\r\n            drafts.push(createPlayerRow(index, player, hero_ids, selected_id));\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col sm=\"12\" md=\"6\">\r\n                        {drafts}\r\n                    </Col>\r\n                    <Col sm=\"12\" md=\"6\">\r\n                        <h5 style={{\"width\": \"100%\", \"textAlign\": \"center\"}}>Chat:</h5>\r\n                        <Chat backend={this.props.backend}\r\n                              player={this.state.playerName}\r\n                              team={teamName}\r\n                              messages={this.props.messages}/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Team\r\n","import React from 'react'\r\nimport {\r\n    Spinner, Button, Container, Row, Col, Card, CardImg, CardText, CardBody, CardTitle,\r\n    CardSubtitle\r\n} from 'reactstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst AlignedText = styled.div`\r\n  text-align: center;\r\n  vertical-align: middle;\r\n`;\r\n\r\n\r\nclass MainScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            heroes: [],\r\n            draft: [],\r\n            team: []\r\n        };\r\n\r\n        // Fetch heroes from API, then perform first draft\r\n        fetch(\"https://api.opendota.com/api/heroStats\")\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                this.setState({\r\n                        heroes: result\r\n                });\r\n                this.performDraft();\r\n            });\r\n    }\r\n\r\n    performDraft() {\r\n        // Split heroes based on main attribute\r\n        let mappedHeroes = {int: [], str: [], agi: []};\r\n        this.state.heroes.forEach(hero => {\r\n            const heroAttribute = hero['primary_attr'];\r\n            mappedHeroes[heroAttribute].push(hero)\r\n        });\r\n\r\n        this.setState({\r\n            // Sample one hero from each attribute type\r\n            draft: Object.values(mappedHeroes).map(heroes => this.randomSample(heroes))\r\n        });\r\n    }\r\n\r\n    convertToApiPath(path) {\r\n        return \"https://api.opendota.com\" + path\r\n    }\r\n\r\n    randomSample(items) {\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    }\r\n\r\n    render() {\r\n        // Show loading screen\r\n        const hasLoaded = this.state.heroes.length > 0;\r\n        if (!hasLoaded) {\r\n            return (\r\n                <AlignedText>\r\n                    <h1>Loading heroes...</h1>\r\n                    <Spinner style={{ width: '2rem', height: '2rem' }} />\r\n                </AlignedText>\r\n            )\r\n        }\r\n\r\n        // Heroes have been loaded - render\r\n        const renderedHeroes = this.state.draft\r\n            .map(hero =>\r\n                <Col md=\"4\" xs=\"12\" key={hero['id']}>\r\n                    <Card>\r\n                        <CardImg top width=\"100%\" src={this.convertToApiPath(hero['img'])} alt=\"hero image\" />\r\n                        <CardBody>\r\n                            <CardTitle><h3>{hero['localized_name']}</h3></CardTitle>\r\n                            <CardSubtitle className=\"text-primary\">\r\n                                {hero['attack_type'] + \" \" + hero['primary_attr']}\r\n                            </CardSubtitle>\r\n                            <CardText className=\"text-info\">{hero['roles'].join(\", \")}</CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            );\r\n\r\n        return (\r\n            <AlignedText>\r\n                <h1>You have been given:</h1>\r\n                <Container style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\r\n                    <Row>\r\n                        {renderedHeroes}\r\n                    </Row>\r\n                </Container>\r\n                <Button color=\"primary\" onClick={(e) => {\r\n                    e.preventDefault();\r\n                    this.performDraft();\r\n                }}>Roll the dice again...</Button>\r\n            </AlignedText>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainScreen\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport styled from 'styled-components';\r\nimport Backend from './firebase';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Header from \"./components/header\";\r\nimport Welcome from \"./components/welcome\";\r\nimport Team from \"./components/team\";\r\nimport MainScreen from \"./MainScreen\";\r\n\r\nconst Main = styled.div`\r\n  max-width: 1024px;\r\n  margin: 0 auto; // Center in website\r\n`;\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            teams: null,\r\n            radiantMessages: [],\r\n            direMessages: [],\r\n            heroStats: null\r\n        };\r\n\r\n        this.backend = new Backend((heroStats) => {\r\n            this.setState({\r\n                heroStats: heroStats\r\n            })\r\n        }, (game) => {\r\n            const teams = game[\"teams\"];\r\n            this.setState({\r\n                teams: teams,\r\n                radiantTeam: teams[\"radiant\"],\r\n                direTeam: teams[\"dire\"],\r\n                radiantMessages: teams[\"radiant\"][\"chat\"],\r\n                direMessages: teams[\"dire\"][\"chat\"],\r\n            })\r\n        }, () => {\r\n            console.log(\"New game detected - forcing all players back to welcome screen\");\r\n            this.router.history.push(\"/\");\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter basename=\"/\" ref={(router) => { this.router = router; }}>\r\n                <div>\r\n                    <Header backend={this.backend} heroStats={this.state.heroStats}/>\r\n                    <Main>\r\n                        <Switch>\r\n                            <Route exact\r\n                                   path='/'\r\n                                   render={(props) => <Welcome {...props} teams={this.state.teams}/>}\r\n                            />\r\n                            <Route exact\r\n                                   path='/old'\r\n                                   render={(props) => <MainScreen {...props}/>}\r\n                            />\r\n                            <Route exact\r\n                                   path='/radiant'\r\n                                   render={(props) => <Team {...props}\r\n                                                            backend={this.backend}\r\n                                                            teamName=\"radiant\"\r\n                                                            team={this.state.radiantTeam}\r\n                                                            heroStats={this.state.heroStats}\r\n                                                            messages={this.state.radiantMessages}/>}\r\n                            />\r\n                            <Route exact\r\n                                   path='/dire'\r\n                                   render={(props) => <Team {...props}\r\n                                                            backend={this.backend}\r\n                                                            teamName=\"dire\"\r\n                                                            team={this.state.direTeam}\r\n                                                            heroStats={this.state.heroStats}\r\n                                                            messages={this.state.direMessages}/>}\r\n                            />\r\n                            <Route render={(props) => <Welcome {...props} teams={this.state.teams}/>}/>\r\n                        </Switch>\r\n                    </Main>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render((\r\n        <App/>\r\n    ),\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}